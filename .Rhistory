library(s20x)
trendscatter(HEAT~RATIO,f=0.7, data=fin.df)
trendscatter(HEAT~RATIO,f=0.7, data=fin.df)
trendscatter(HEAT~RATIO,f=0.7, data=fin.df)
trendscatter(HEAT~RATIO,f=0.7, data=fin.df)
trendscatter(HEAT~RATIO,f=0.7, data=fin.df)
trendscatter(HEAT~RATIO,f=0.7, data=fin.df)
trendscatter(HEAT~RATIO,f=0.7, data=fin.df)
#Can you find this number in the summary info?
MSS/TSS
library(s20x)
trendscatter(Height~BHDiameter,f=0.3, data=fin.df)
library(s20x)
trendscatter(Height~BHDiameter,f=0.3, data=spruce.df)
library(s20x)
trendscatter(Height~BHDiameter,f=0.5, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.6, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.7, data=spruce.df)
obj = lm(Height~BHDiameter, data = spruce.df)
spruce.lm = lm(Height~BHDiameter, data = spruce.df)
spruce.lm = lm(Height~BHDiameter, data = spruce.df)
summary(spruce.lm)
library(s20x)
trendscatter(Height~BHDiameter,f=0.5, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.6, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.7, data=spruce.df)
layout(matrix(1:4,nr=2,nc=2,byrow=TRUE))
library(s20x)
trendscatter(Height~BHDiameter,f=0.5, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.6, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.7, data=spruce.df)
library(s20x)
trendscatter(Height~BHDiameter,f=0.5, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.6, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.7, data=spruce.df)
layout(matrix(1:4,nr=2,nc=2,byrow=TRUE))
layout(4)
library(s20x)
trendscatter(Height~BHDiameter,f=0.5, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.6, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.7, data=spruce.df)
layout(matrix(1:4,nr=2,nc=2,byrow=TRUE))
layout.show(4)
library(s20x)
layout(matrix(1:4,nr=2,nc=2,byrow=TRUE))
trendscatter(Height~BHDiameter,f=0.5, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.6, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.7, data=spruce.df)
layout.show(4)
library(s20x)
layout(matrix(1:4,nr=2,nc=2,byrow=TRUE))
trendscatter(Height~BHDiameter,f=0.5, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.6, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.7, data=spruce.df)
knitr::opts_chunk$set(echo = TRUE)
abline(spruce.lm)
layout.show(1)
l = layout(1)
knitr::opts_chunk$set(echo = TRUE)
l = layout(1)
with(spruce.df, plot(Height~BHDiameter, main="Height vs BHDiameter for tree", xlab="Breast Height Diameter of tree (cm)", ylab="Height of tree (m)", pch=21, bg="Blue", cex=1.2,xlim=c(0,max(BHDiameter)*1.1),ylim=c(0,max(Height)*1.1), data=spruce.df))
abline(spruce.lm)
mycex=1
with(spruce.df, plot(Height~BHDiameter, main="Height vs BHDiameter for tree", xlab="Breast Height Diameter of tree (cm)", ylab="Height of tree (m)", pch=21, bg="Blue", cex=mycex,xlim=c(0,max(BHDiameter)*1.1),ylim=c(0,max(Height)*1.1)))
abline(spruce.lm)
yhat=fitted(spruce.lm)
with(spruce.df, plot(Height~BHDiameter, main="residual sum of squares (RSS)", xlab="Breast Height Diameter of tree (cm)", ylab="Height of tree (m)", pch=21, bg="Blue", cex=1.2,xlim=c(0,max(BHDiameter)*1.1),ylim=c(0,max(Height)*1.1)))
abline(spruce.lm)
with(spruce.df, {segments(BHDiameter, Height, BHDiameter, yhat)})
abline(spruce.df)
with(spruce.df, plot(Height~BHDiameter, main="Model Sum of Squares (MSS)", xlab="Breast Height Diameter of tree (cm)", ylab="Height of tree (m)", pch=21, bg="Blue", cex=1.2,xlim=c(0,max(BHDiameter)*1.1),ylim=c(0,max(Height)*1.1)))
with(spruce.df, abline(h=mean(Height)))
with(spruce.df, {segments(BHDiameter, mean(Height), BHDiameter, yhat, col="red")})
abline(spruce.lm)
with(spruce.df, plot(Height~BHDiameter, main="Total Sum of Squares (TSS)", xlab="Breast Height Diameter of tree (cm)", ylab="Height of tree (m)", pch=21, bg="Blue", cex=1.2,xlim=c(0,max(BHDiameter)*1.1),ylim=c(0,max(Height)*1.1)))
with(spruce.df, abline(h=mean(Height)))
with(spruce.df, {segments(BHDiameter, Height, BHDiameter, mean(Height), col="Green")})
l=layout(matrix(1:4, nrow=2, ncol=2, byrow=TRUE))
l=layout(matrix(1:4, nrow=2, ncol=2, byrow=TRUE))
mycex=1
with(spruce.df, plot(Height~BHDiameter, main="Height vs BHDiameter for tree", xlab="Breast Height Diameter of tree (cm)", ylab="Height of tree (m)", pch=21, bg="Blue", cex=mycex,xlim=c(0,max(BHDiameter)*1.1),ylim=c(0,max(Height)*1.1)))
abline(spruce.lm)
yhat=fitted(spruce.lm)
with(spruce.df, plot(Height~BHDiameter, main="residual sum of squares (RSS)", xlab="Breast Height Diameter of tree (cm)", ylab="Height of tree (m)", pch=21, bg="Blue", cex=1.2,xlim=c(0,max(BHDiameter)*1.1),ylim=c(0,max(Height)*1.1)))
abline(spruce.lm)
with(spruce.df, {segments(BHDiameter, Height, BHDiameter, yhat)})
abline(spruce.df)
with(spruce.df, plot(Height~BHDiameter, main="Model Sum of Squares (MSS)", xlab="Breast Height Diameter of tree (cm)", ylab="Height of tree (m)", pch=21, bg="Blue", cex=1.2,xlim=c(0,max(BHDiameter)*1.1),ylim=c(0,max(Height)*1.1)))
with(spruce.df, abline(h=mean(Height)))
with(spruce.df, {segments(BHDiameter, mean(Height), BHDiameter, yhat, col="red")})
abline(spruce.lm)
with(spruce.df, plot(Height~BHDiameter, main="Total Sum of Squares (TSS)", xlab="Breast Height Diameter of tree (cm)", ylab="Height of tree (m)", pch=21, bg="Blue", cex=1.2,xlim=c(0,max(BHDiameter)*1.1),ylim=c(0,max(Height)*1.1)))
with(spruce.df, abline(h=mean(Height)))
with(spruce.df, {segments(BHDiameter, Height, BHDiameter, mean(Height), col="Green")})
knitr::opts_chunk$set(echo = TRUE)
library(s20x)
layout(matrix(1:4,nr=2,nc=2,byrow=TRUE))
trendscatter(Height~BHDiameter,f=0.5, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.6, data=spruce.df)
trendscatter(Height~BHDiameter,f=0.7, data=spruce.df)
library(ggplot2)
gg=ggplot(spruce.df, aes(x=BHDiameter, y=Height, color=BHDiameter))+geom_point()+geom_line()+geom_smooth(method="lm")+ggtitle("Height of tree vs Breast Height Diameter of tree")
gg
library(ggplot2)
gg=ggplot(spruce.df, aes(x=BHDiameter, y=Height, color=BHDiameter))+geom_point()+geom_line()+geom_smooth(method="lm")+ggtitle("Height of tree vs Breast Height Diameter of tree")
gg
81/153
48/223
103/223
(72+48+22)/223
spruce.df = read.csv("SPRUCE.csv")
knitr::opts_chunk$set(echo = TRUE)
predict(quad.lm, data.frame(BHDiameter=c(15,18,20)))
quad.lm=lm(Height~BHDiameter + I(BHDiameter^2),data=spruce.df)
predict(quad.lm, data.frame(BHDiameter=c(15,18,20)))
quad.lm=lm(Height~BHDiameter + I(BHDiameter^2),data=spruce.df)
summary(quad.lm)
quad.lm$qr
quad.lm=lm(Height~BHDiameter + I(BHDiameter^2),data=spruce.df)
predict(quad.lm, data.frame(BHDiameter=c(15,18,20)))
library(mypackage)
spruce.lm=with(spruce.df,lm(Height~BHDiameter)) #creating a linear model from HEIGHT~BHDiameter
summary(spruce.lm) #printing out the summary
anova(quad.lm)
TSS = with(spruce.df, sum((Height-mean(Height))^2))
RSS= with(spruce.df, sum((Height-height.qfit)^2))
TSS = with(spruce.df, sum((Height-mean(Height))^2))
RSS= with(spruce.df, sum((Height-height.qfit)^2))
TSS = with(spruce.df, sum((Height-mean(Height))^2))
RSS= with(spruce.df, sum((Height-height.fit)^2))
TSS = with(spruce.df, sum((Height-mean(Height))^2))
RSS= with(spruce.df, sum((Height-height.fit)^2))
height.qfit=fitted(quad.lm)
TSS = with(spruce.df, sum((Height-mean(Height))^2))
RSS= with(spruce.df, sum((Height-height.qfit)^2))
MSS = with(spruce.df, sum((height.qfit-mean(Height))^2))
height.qfit=fitted(quad.lm)
TSS = with(spruce.df, sum((Height-mean(Height))^2))
RSS= with(spruce.df, sum((Height-height.qfit)^2))
MSS = with(spruce.df, sum((height.qfit-mean(Height))^2))
MSS/TSS
cooks20x(quad.lm)
library(s20x)
cooks20x(quad.lm)
library(s20x) #load the library s20x
trendscatter(Height~BHDiameter, f=0.5, data = spruce.df) #using trendscatter to print out HEIGHT vs BHDiameter
spruce.df= read.csv("SPRUCE.csv") #reading in the SPRUCE.csv data into spruce.df
spruce.tail = tail(spruce.df)
spruce.tail #printing out last six lines of SPRUCE.csv data
knitr::opts_chunk$set(echo = TRUE)
spruce.df= read.csv("SPRUCE.csv") #reading in the SPRUCE.csv data into spruce.df
spruce.tail = tail(spruce.df)
spruce.tail #printing out last six lines of SPRUCE.csv data
library(s20x) #load the library s20x
trendscatter(Height~BHDiameter, f=0.5, data = spruce.df) #using trendscatter to print out HEIGHT vs BHDiameter
spruce.lm=with(spruce.df,lm(Height~BHDiameter)) #creating a linear model from HEIGHT~BHDiameter
summary(spruce.lm) #printing out the summary
height.res = residuals(spruce.lm) #residuals() to assign the residuals to height.res object for further use
height.fit = fitted(spruce.lm) #fitted() method to assign fitted values to height.fit object for further use
plot(height.res~height.fit, bg = "BLUE", pch = 21, cex = 1.2) #uing plot method to plot residuals against fitted values, blue dot and 1.2 more size
trendscatter(height.res ~ height.fit)
plot(spruce.lm, which =1)
normcheck(spruce.lm,shapiro.wilk = TRUE)
quad.lm=lm(Height~BHDiameter + I(BHDiameter^2),data=spruce.df)
summary(quad.lm)
plot(Height~BHDiameter, bg = "Blue", data = spruce.df, pch =21)
myplot = function(x) {
quad.lm$coef[1]+quad.lm$coef[2]*x+quad.lm$coef[3]*x^2
}
curve(myplot, lwd = 2, col ="Red", add = TRUE)
quad.fit = fitted(quad.lm)
plot(quad.lm, which = 1)
normcheck(quad.lm,shapiro.wilk = TRUE) #first graph is qq plot
summary(quad.lm)
coef(quad.lm)
quad.lm$coefficients[1] # is the value of beta zero
quad.lm$coefficients[2] # is the value of beta one
quad.lm$coefficients[3] # is the value of beta two
ciReg(quad.lm)
quad.lm=lm(Height~BHDiameter + I(BHDiameter^2),data=spruce.df)
predict(quad.lm, data.frame(BHDiameter=c(15,18,20)))
anova(spruce.lm,quad.lm)
height.qfit=fitted(quad.lm)
TSS = with(spruce.df, sum((Height-mean(Height))^2))
RSS= with(spruce.df, sum((Height-height.qfit)^2))
MSS = with(spruce.df, sum((height.qfit-mean(Height))^2))
MSS/TSS
cooks20x(quad.lm)
quad2.lm=lm(Height~BHDiameter + I(BHDiameter^2) , data=spruce.df[-24,])
summary(quad2.lm)
summary(quad.lm)
spruce2.df=within(spruce.df, X<-(BHDiameter-18)*(BHDiameter>18))
spruce2.df
lmp=lm(Height~BHDiameter + X,data=spruce2.df)
tmp=summary(lmp)
names(tmp)
myf = function(x,coef){
coef[1]+coef[2]*(x) + coef[3]*(x-18)*(x-18>0)
}
plot(spruce.df,main="Piecewise regression")
myf(0, coef=tmp$coefficients[,"Estimate"])
curve(myf(x,coef=tmp$coefficients[,"Estimate"] ),add=TRUE, lwd=2,col="Blue")
abline(v=18)
text(18,16,paste("R sq.=",round(tmp$r.squared,4) ))
library(mypackage)
with(spruce.df,scatterhist(BHDiameter,Height, xlab="diameter",ylab="Height"))
with(spruce.df,scatterhist(BHDiameter,Height, xlab="diameter",ylab="Height"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
knitr::opts_chunk$set(echo = TRUE)
library(mypackage)
with(spruce.df,scatterhist(BHDiameter,Height, xlab="diameter",ylab="Height"))
library(mypackage)
plot(Height~BHDiameter, main="Spruce Height Prediction",xlab="Breast Height diameter (cm),", ylab="Height of tree (m)", pch=21, bg="Blue", cex=1.1, xlim=c(0,max(BHDiameter)*1.0), ylim=c(0,max(Height)*1.0), data=spruce.df)
curve(myplot,lwd=2,col="steelblue", add=TRUE)
with(spruce.df,segments(BHDiameter, Height, BHDiameter, quad.lm$coef[1]+quad.lm$coef[2]*BHDiameter+quad.lm$coef[3]*BHDiameter^2,col="Black"))
lgcooks=spruce.df[c(18,21,24),]
with(lgcooks,segments(BHDiameter, Height, BHDiameter, quad.lm$coef[1]+quad.lm$coef[2]*BHDiameter+quad.lm$coef[3]*BHDiameter^2,col="RED",lwd=3))
with(spruce.df,text(BHDiameter~Height,labels=row.names(spruce.df),pos=4,cex=0.5))
with(spruce.df,arrows(BHDiameter[18], Height[24], BHDiameter[24], Height[24],col="blue", lwd=2))
with(spruce.df,text(BHDiameter[18], Height[24], labels=c("Highest Cooks distance   "), pos=2,cex=0.6, ))
knitr::opts_chunk$set(echo = TRUE)
library(MATH4753BEKFALL2032)
myfun(spruce.df)
knitr::opts_chunk$set(echo = TRUE)
library(MATH4753BEKFALL2032)
myfun(spruce.df)
knitr::opts_chunk$set(echo = TRUE)
library(MATH4753BEKFALL2032)
myfun(spruce.df)
knitr::opts_chunk$set(echo = TRUE)
library(MATH4753BEKFALL2032)
myfun(spruce.df)
v <- Intro2R::myreadxl()
v$SEEDLING -> df
View(v)
knitr::opts_chunk$set(echo = TRUE)
v <- Intro2R::myreadxl()
v$MTBE -> df
C:\Users\askub\OneDrive - University of Oklahoma\MATH4753\Lab2\DATAxls
v <- Intro2R::myreadxl()
v$MTBE -> df
v <- Intro2R::myreadxl()
v$MTBE -> df
v <- Intro2R::myreadxl()
v$MTBE -> df
v <- Intro2R::myreadxl()
v$MTBE -> df
MTBE <- readxl::read_xls("MTBE.xls")
MTBE_data <- readxl::read_xls("MTBE.xls")
# Assuming you have loaded the data into a data frame named MTBE_data
# and the column containing well IDs is named Well_ID
set.seed(123)  # Setting seed for reproducibility
sample_wells <- sample(MTBE_data$Well_ID, 5)
MTBE_data <- readxl::read_xls("MTBE.xls")
# Assuming you have loaded the data into a data frame named MTBE_data
# and the column containing well IDs is named Well_ID
set.seed(123)  # Setting seed for reproducibility
sample_wells <- sample(MTBE_data$Well, 5)
MTBE_data <- read.csv("MTBE.csv")
MTBE_data <- read.csv("MTBE.csv")
set.seed(123)  # Setting seed for reproducibility
sample_wells <- sample(MTBE_data$Well_ID, 5)
MTBE_data <- read.csv("MTBE.csv")
str(MTBE_data)
set.seed(123)  # Setting seed for reproducibility
sample_wells <- sample(MTBE_data$Well_ID, 5)
MTBE_data <- read.csv("MTBE.csv")
str(MTBE_data)
set.seed(123)  # Setting seed for reproducibility
sample_rows <- sample(1:nrow(MTBE_data), 5)
# Extract the Well_IDs from the sampled rows
sample_wells <- MTBE_data$Well_ID[sample_rows]
sample_wells
MTBE_data <- read.csv("MTBE.csv")
set.seed(123)  # Setting seed for reproducibility
sample_rows <- sample(1:nrow(MTBE_data), 5)
# Extract the Well_IDs from the sampled rows
sample_wells <- MTBE_data$Well_ID[sample_rows]
sample_wells
MTBE_data <- read.csv("MTBE.csv")
set.seed(123)  # Setting seed for reproducibility
sample_rows <- sample(1:nrow(MTBE_data), 5)
# Extract the Well_IDs from the sampled rows
sample_wells <- MTBE_data[sample_rows]
MTBE_data <- read.csv("MTBE.csv")
set.seed(123)  # Setting seed for reproducibility
sample_rows <- sample(1:nrow(MTBE_data), 5)
# Extract the Well_IDs from the sampled rows
sample_wells <- MTBE_data$Well_ID[sample_rows]
sample_wells
MTBE_data <- read.csv("MTBE.csv")
set.seed(123)  # Setting seed for reproducibility
sample_rows <- sample(1:nrow(MTBE_data), 5)
# Extract the selected rows
sample_data <- MTBE_data[sample_rows, ]
sample_data
MTBE_data <- read.csv("MTBE.csv")
set.seed(123)  # Setting seed for reproducibility
sample_rows <- sample(1:nrow(MTBE_data), 5)
MTBE_data[sample_rows,]
# Extract the selected rows
sample_data <- MTBE_data[sample_rows,]
sample_data
MTBE_data <- read.csv("MTBE.csv")
set.seed(123)  # Setting seed for reproducibility
sample_rows <- sample(1:nrow(MTBE_data), 5)
MTBE_data[sample_rows,]
MTBE_data <- read.csv("MTBE.csv")
set.seed(121)  # Setting seed for reproducibility
sample_rows <- sample(1:nrow(MTBE_data), 5)
MTBE_data[sample_rows,]
MTBE_data <- read.csv("MTBE.csv")
set.seed(12)  # Setting seed for reproducibility
sample_rows <- sample(1:nrow(MTBE_data), 5)
MTBE_data[sample_rows,]
MTBE_data <- read.csv("MTBE.csv")
set.seed(1)  # Setting seed for reproducibility
sample_rows <- sample(1:nrow(MTBE_data), 5)
MTBE_data[sample_rows,]
MTBE_data <- read.csv("MTBE.csv")
set.seed(1)  # Setting seed for reproducibility
sample_rows <- sample(1:nrow(MTBE_data), 5)
MTBE_data[sample_rows,]
MTBE_data <- read.csv("MTBE.csv")
set.seed(1)  # Setting seed for reproducibility
sample_rows <- sample(1:nrow(MTBE_data), 5)
MTBE_data[sample_rows,]
MTBE_data <- read.csv("MTBE.csv")
set.seed(1)  # Setting seed for reproducibility
sample_rows <- sample(1:223, 5)
MTBE_data[sample_rows,]
MTBE_data <- read.csv("MTBE.csv")
set.seed(1)  # Setting seed for reproducibility
sample_rows <- sample(1:223, 5)
MTBE_data[sample_rows,]
mtbeo <- na.omit(MTBE_data)
sd(mtbeo[])
MTBE_data <- read.csv("MTBE.csv")
set.seed(1)  # Setting seed for reproducibility
sample_rows <- sample(1:223, 5)
MTBE_data[sample_rows,]
mtbeo <- na.omit(MTBE_data)
depth=mtbeo[mtbeo$Aquifier=="Unconsoli",]$Depth
mean(depth)
MTBE_data <- read.csv("MTBE.csv")
set.seed(1)  # Setting seed for reproducibility
sample_rows <- sample(1:223, 5)
MTBE_data[sample_rows,]
mtbeo <- na.omit(MTBE_data)
depth=mtbeo[mtbeo$Aquifier=="Unconsoli",]$Depth
mean(depth)
sd(mtbeo[mtbeo$Aquifier=="Bedrock",]$Depth)
v <- Intro2R::myreadxl()
v$EARTHQUAKE -> df
C:\Users\askub\OneDrive - University of Oklahoma\MATH4753\Lab2\DATAxls
v <- Intro2R::myreadxl()
v$EARTHQUAKE -> df
file_path <- file.choose()  # This will open a file dialog to choose the Excel file
df <- readxl::read_excel(file_path)
v <- Intro2R::myreadxl()
file_path <- file.choose()  # This will open a file dialog to choose the Excel file
df <- readxl::read_excel(file_path)
set.seed(2)  # Setting seed for reproducibility
sample_rows1 <- sample(1:nrow(df), 5)
df[sample_rows1,]
set.seed(2)  # Setting seed for reproducibility
sample_rows1 <- sample(1:nrow(df), 5)
df[sample_rows1,]
plot(ts(eq$MAG))
set.seed(2)  # Setting seed for reproducibility
sample_rows1 <- sample(1:nrow(df), 5)
df[sample_rows1,]
plot(ts(df$MAG))
set.seed(2)  # Setting seed for reproducibility
sample_rows1 <- sample(1:nrow(df), 5)
df[sample_rows1,]
plot(ts(df$MAGNITUDE))
v <- Intro2R::myreadxl()
file_path <- file.choose()  # This will open a file dialog to choose the Excel file
eq <- readxl::read_excel(file_path)
v <- Intro2R::myreadxl()
file_path <- file.choose()  # This will open a file dialog to choose the Excel file
v <- Intro2R::myreadxl()
file_path <- file.choose()  # This will open a file dialog to choose the Excel file
eq <- readxl::read_excel(file_path)
v <- Intro2R::myreadxl()
file_path <- file.choose()  # This will open a file dialog to choose the Excel file
df <- readxl::read_excel(file_path)
set.seed(2)  # Setting seed for reproducibility
sample_rows1 <- sample(1:nrow(eq), 5)
df[sample_rows1,]
plot(ts(df$MAGNITUDE))
mean(df$MAGNITUDE)
df <- readxl::read_xls("EARTHQUAKE.xls")
set.seed(2)  # Setting seed for reproducibility
sample_rows1 <- sample(1:nrow(eq), 5)
eq[sample_rows1,]
plot(ts(eq$MAGNITUDE))
mean(eq$MAGNITUDE)
knitr::opts_chunk$set(echo = TRUE)
incidents=c(15, 8, 63, 106)
MS=c("None","Both","Legs","Wheels")
Cause=rep(MS,incidents)
Cause
windows() pareto(Cause)
pareto(Cause)
knitr::opts_chunk$set(echo = TRUE)
library(MATH4753pareto)
MATH4753pareto::pareto(Cause, mn = "Pareto barplot")
freqMic=c(32,6,12)
product=c("Windows","Explorer","Office")
pie(freqMic,labels=product,main="Microsoft product security issue")
freqMicro=c(6, 8, 22, 3, 11)
secBul=c(" Denial of service","Information disclosure","Remote code execution","Spoofing","Privilege elevation")
a=rep(secBul,freqMicro)
pareto(a)
swd=read.csv("C:\\Users\\askub\\OneDrive - University of Oklahoma\\MATH4753\\Lab2\\DATAxls\\SWDEFECTS.csv", header=TRUE)
swd=read.csv("C:\\Users\\askub\\OneDrive - University of Oklahoma\\MATH4753\\Lab2\\DATAxls\\SWDEFECTS.csv", header=TRUE)
head(swd)
swd=read.csv("C:\\Users\\askub\\OneDrive - University of Oklahoma\\MATH4753\\Lab2\\DATAxls\\SWDEFECTS.csv", header=TRUE)
head(swd)
library(plotrix)
install.packages("plotrix")
swd=read.csv("C:\\Users\\askub\\OneDrive - University of Oklahoma\\MATH4753\\Lab2\\DATAxls\\SWDEFECTS.csv", header=TRUE)
head(swd)
library(plotrix)
tab=table(swd$defect)
rtab=tab/sum(tab)
round(rtab,2)
swd=read.csv("C:\\Users\\askub\\OneDrive - University of Oklahoma\\MATH4753\\Lab2\\DATAxls\\SWDEFECTS.csv", header=TRUE)
head(swd)
library(plotrix)
tab=table(swd$defect)
rtab=tab/sum(tab)
round(rtab,2)
pie3D(rtab,labels=list("OK","Defective"),main="pie plot of SWD")
vol = read.csv("C:\\Users\\askub\\OneDrive - University of Oklahoma\\MATH4753\\Lab2\\DATAxls\\VOLTAGE.csv")
head(vol)
vol = read.csv("C:\\Users\\askub\\OneDrive - University of Oklahoma\\MATH4753\\Lab2\\DATAxls\\VOLTAGE.csv")
head(vol)
old <-subset(vol,subset=LOCATION=="OLD")
old$VOLTAGE->vtn
max(vtn)
min(vtn)
lept<-min(vtn)-0.05
rept<-max(vtn)+0.05
rnge<-rept-lept
inc<-rnge/9
inc
seq(lept, rept,by=inc)->cl
cl
cvtn<-cut(vtn,breaks=cl)
old.tab=table(cvtn)
table(cvtn)
barplot(old.tab,space=0, main="Frequency Histogram(OLD)",las=2, col = "light Green")
barplot(old.tab,space=0, main="Frequency Histogram(OLD)",las=2, col = "light Blue")
stem(old$VOLTAGE, scale=2)
new<-subset(vol,subset=LOCATION=="NEW")
new$VOLTAGE->vtn
vtn
max(vtn)
min(vtn)
lept<-min(vtn)-0.05
rept<-max(vtn)+0.05
rnge<-rept-lept
inc<-rnge/9
inc
cvtn<-cut(vtn,breaks=cl)
new.tab=table(cvtn)
barplot(new.tab,space=0,main="Frequency Histogram(NEW)",las=2, col = "Red")
par(mfrow=c(1,2))
barplot(old.tab,space=0,main="Frequency Histogram(OLD)",las=2, col = "Yellow")
barplot(new.tab,space=0,main="Frequency Histogram(NEW)",las=2, col = "Blue")
mean(old$VOLTAGE)
z=(10.50-mean(old$VOLTAGE))/sd(old$VOLTAGE)
z
z=(10.50-mean(new$VOLTAGE))/sd(new$VOLTAGE)
z
boxplot(old$VOLTAGE, main = "Boxplot for old", xlab="OLD",col="Black", horizontal = TRUE, notch=TRUE)
boxplot(old$VOLTAGE, main = "Boxplot for old", xlab="OLD",col="Brown", horizontal = TRUE, notch=TRUE)
z=(old$VOLTAGE-mean(old$VOLTAGE))/sd(old$VOLTAGE)
old$VOLTAGE[abs(z)>3]
boxplot(new$VOLTAGE, main = "Boxplot for New", xlab="NEW",col="Red", horizontal = TRUE, notch=TRUE)
z=(new$VOLTAGE-mean(new$VOLTAGE))/sd(new$VOLTAGE)
new$VOLTAGE[abs(z)>3]
ROUGH.df = read.csv("C:\\Users\\askub\\OneDrive - University of Oklahoma\\MATH4753\\Lab2\\DATAxls\\ROUGHPIPE.csv")
rough=ROUGH.df$ROUGH
rough
z=(rough-mean(rough))/sd(rough)
sd2=rough[abs(z)<=2]
rough[abs(z)>=2 & abs(z)<=3]
galaxy = read.csv("C:\\Users\\askub\\OneDrive - University of Oklahoma\\MATH4753\\Lab2\\DATAxls\\GALAXY2.csv")
gobi=read.csv("C:\\Users\\askub\\OneDrive - University of Oklahoma\\MATH4753\\Lab2\\DATAxls\\GOBIANTS.csv")
head(gobi)
galaxy = read.csv("C:\\Users\\askub\\OneDrive - University of Oklahoma\\MATH4753\\Lab2\\DATAxls\\GALAXY2.csv")
galaxy = readxl::read_xls("C:\\Users\\askub\\OneDrive - University of Oklahoma\\MATH4753\\Lab2\\DATAxls\\GALAXY2.xls")
head(galaxy)
plot(galaxy$VELOCITY)
a1775A = subset(galaxy,galaxy$VELOCITY>21000)
a1775B = subset(galaxy,galaxy$VELOCITY<=21000)
mean(a1775A$VELOCITY)
setwd("C:/Users/askub/OneDrive - University of Oklahoma/MATH4753/Lab5/Applied-Statistics-with-R-Lab-5")
getwd()
knitr::opts_chunk$set(echo = TRUE)
getwd()
